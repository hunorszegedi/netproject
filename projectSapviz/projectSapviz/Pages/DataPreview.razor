@page "/data"
@using projectSapviz.Services
@using System.Reflection
@inject BacDataService BacData

<div class="data-page">
    <h3>Adatok előnézete</h3>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger">
            @errorMessage
        </div>
    }
    else if (records == null)
    {
        <div class="loading">
            <span>Adatok betöltése...</span>
        </div>
    }
    else
    {
        <div class="table-container">
            <table class="data-table">
                <thead>
                    <tr>
                        <th @onclick="() => SortBy(nameof(BacRecord.Code))" class="@GetSortClass(nameof(BacRecord.Code))">
                            Kód
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.School))" class="@GetSortClass(nameof(BacRecord.School))">
                            Iskola
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.PreviousProm))" class="@GetSortClass(nameof(BacRecord.PreviousProm))">
                            Előző beiratkozás
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.EducationForm))" class="@GetSortClass(nameof(BacRecord.EducationForm))">
                            Oktatási forma
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.Specialization))" class="@GetSortClass(nameof(BacRecord.Specialization))">
                            Specializáció
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.RomanianLevel))" class="@GetSortClass(nameof(BacRecord.RomanianLevel))">
                            Román szint
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.NativeSubject))" class="@GetSortClass(nameof(BacRecord.NativeSubject))">
                            Anyanyelv
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.ExtraLanguage))" class="@GetSortClass(nameof(BacRecord.ExtraLanguage))">
                            Idegen nyelv
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.ExtraLanguageGrades))" class="@GetSortClass(nameof(BacRecord.ExtraLanguageGrades))">
                            Nyelvi jegyek
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.MandatorySubject))" class="@GetSortClass(nameof(BacRecord.MandatorySubject))">
                            Kötelező tárgy
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.ChosenSubject))" class="@GetSortClass(nameof(BacRecord.ChosenSubject))">
                            Választott tárgy
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.Tic))" class="@GetSortClass(nameof(BacRecord.Tic))">
                            TIC
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.Avg))" class="@GetSortClass(nameof(BacRecord.Avg))">
                            Átlag
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.Passed))" class="@GetSortClass(nameof(BacRecord.Passed))">
                            Átment
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.NativeLevel))" class="@GetSortClass(nameof(BacRecord.NativeLevel))">
                            Anyanyelv szint
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.County))" class="@GetSortClass(nameof(BacRecord.County))">
                            Megye
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.Year))" class="@GetSortClass(nameof(BacRecord.Year))">
                            Év
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.FullSchoolName))" class="@GetSortClass(nameof(BacRecord.FullSchoolName))">
                            Iskola teljes neve
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.City))" class="@GetSortClass(nameof(BacRecord.City))">
                            Város
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.Medium))" class="@GetSortClass(nameof(BacRecord.Medium))">
                            Közeg
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.SchoolCode))" class="@GetSortClass(nameof(BacRecord.SchoolCode))">
                            Iskola kód
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.NameHu))" class="@GetSortClass(nameof(BacRecord.NameHu))">
                            Magyar név
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.CityRo))" class="@GetSortClass(nameof(BacRecord.CityRo))">
                            Város (RO)
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.CityHu))" class="@GetSortClass(nameof(BacRecord.CityHu))">
                            Város (HU)
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.CountyRo))" class="@GetSortClass(nameof(BacRecord.CountyRo))">
                            Megye (RO)
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.CountyHu))" class="@GetSortClass(nameof(BacRecord.CountyHu))">
                            Megye (HU)
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.SchoolType))" class="@GetSortClass(nameof(BacRecord.SchoolType))">
                            Iskola típus
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.MandatoryGradeFinal))" class="@GetSortClass(nameof(BacRecord.MandatoryGradeFinal))">
                            Kötelező jegy
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.ChosenGradeFinal))" class="@GetSortClass(nameof(BacRecord.ChosenGradeFinal))">
                            Választott jegy
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.RomanianGradeFinal))" class="@GetSortClass(nameof(BacRecord.RomanianGradeFinal))">
                            Román jegy
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.NativeGradeFinal))" class="@GetSortClass(nameof(BacRecord.NativeGradeFinal))">
                            Anyanyelv jegy
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.Nationality))" class="@GetSortClass(nameof(BacRecord.Nationality))">
                            Nemzetiség
                        </th>
                        <th @onclick="() => SortBy(nameof(BacRecord.SpecializationType))" class="@GetSortClass(nameof(BacRecord.SpecializationType))">
                            Specializáció típus
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var record in currentRecords)
                    {
                        <tr>
                            <td>@record.Code</td>
                            <td>@record.School</td>
                            <td>@(record.PreviousProm ? "Igen" : "Nem")</td>
                            <td>@record.EducationForm</td>
                            <td>@record.Specialization</td>
                            <td>@record.RomanianLevel</td>
                            <td>@record.NativeSubject</td>
                            <td>@record.ExtraLanguage</td>
                            <td>@record.ExtraLanguageGrades</td>
                            <td>@record.MandatorySubject</td>
                            <td>@record.ChosenSubject</td>
                            <td>@record.Tic</td>
                            <td>@record.Avg.ToString("N2")</td>
                            <td>@record.Passed</td>
                            <td>@record.NativeLevel</td>
                            <td>@record.County</td>
                            <td>@record.Year</td>
                            <td>@record.FullSchoolName</td>
                            <td>@record.City</td>
                            <td>@(record.Medium ? "Igen" : "Nem")</td>
                            <td>@record.SchoolCode</td>
                            <td>@record.NameHu</td>
                            <td>@record.CityRo</td>
                            <td>@record.CityHu</td>
                            <td>@record.CountyRo</td>
                            <td>@record.CountyHu</td>
                            <td>@record.SchoolType</td>
                            <td>@record.MandatoryGradeFinal.ToString("N2")</td>
                            <td>@record.ChosenGradeFinal.ToString("N2")</td>
                            <td>@record.RomanianGradeFinal.ToString("N2")</td>
                            <td>@record.NativeGradeFinal.ToString("N2")</td>
                            <td>@record.Nationality</td>
                            <td>@record.SpecializationType</td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="pagination">
                <span>@GetPaginationText()</span>
                <div class="pagination-buttons">
                    <button @onclick="PreviousPage" disabled="@(currentPage == 0)">
                        &laquo;
                    </button>
                    @for (int i = startPage; i <= endPage; i++)
                    {
                        var pageNumber = i;
                        <button class="@(pageNumber == currentPage ? "active" : "")"
                                @onclick="() => GoToPage(pageNumber)">
                            @(pageNumber + 1)
                        </button>
                    }
                    <button @onclick="NextPage" disabled="@(currentPage >= totalPages - 1)">
                        &raquo;
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<BacRecord>? records;
    private List<BacRecord> sortedRecords = new();
    private List<BacRecord> currentRecords = new();
    private string? errorMessage;
    private int pageSize = 10;
    private int currentPage = 0;
    private int totalPages => sortedRecords.Count == 0 ? 0 : (int)Math.Ceiling(sortedRecords.Count / (double)pageSize);
    private int startPage => Math.Max(0, Math.Min(currentPage - 2, totalPages - 5));
    private int endPage => Math.Min(startPage + 4, totalPages - 1);

    // Rendezési változók
    private string currentSortColumn = "Code"; // Alapértelmezett rendezési oszlop
    private bool sortAscending = true; // Növekvő rendezés alapértelmezetten

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            records = await BacData.GetRecordsAsync();
            ApplySorting();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void SortBy(string columnName)
    {
        // Ha ugyanarra az oszlopra kattintunk, megfordítjuk a rendezési irányt
        if (columnName == currentSortColumn)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            currentSortColumn = columnName;
            sortAscending = true; // Új oszlopnál növekvő rendezés
        }

        ApplySorting();
    }

    private void ApplySorting()
    {
        if (records == null)
            return;

        // Reflection használata a dinamikus tulajdonság alapú rendezéshez
        PropertyInfo prop = typeof(BacRecord).GetProperty(currentSortColumn);

        if (prop != null)
        {
            if (sortAscending)
            {
                sortedRecords = records.OrderBy(r =>
                {
                    var value = prop.GetValue(r);
                    // Null értékek kezelése
                    return value ?? string.Empty;
                }).ToList();
            }
            else
            {
                sortedRecords = records.OrderByDescending(r =>
                {
                    var value = prop.GetValue(r);
                    // Null értékek kezelése
                    return value ?? string.Empty;
                }).ToList();
            }

            currentPage = 0; // Rendezésnél visszalépünk az első oldalra
            UpdateCurrentRecords();
        }
    }

    private string GetSortClass(string columnName)
    {
        if (columnName != currentSortColumn)
            return "sortable";

        return sortAscending ? "sortable sort-asc" : "sortable sort-desc";
    }

    private void UpdateCurrentRecords()
    {
        if (sortedRecords.Count == 0)
            return;

        currentRecords = sortedRecords
            .Skip(currentPage * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void PreviousPage()
    {
        if (currentPage > 0)
        {
            currentPage--;
            UpdateCurrentRecords();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages - 1)
        {
            currentPage++;
            UpdateCurrentRecords();
        }
    }

    private void GoToPage(int page)
    {
        currentPage = page;
        UpdateCurrentRecords();
    }

    private string GetPaginationText()
    {
        if (sortedRecords.Count == 0)
            return "Nincs megjeleníthető adat";

        int start = currentPage * pageSize + 1;
        int end = Math.Min(start + pageSize - 1, sortedRecords.Count);
        return $"{start}-{end} / {sortedRecords.Count} rekord";
    }
}