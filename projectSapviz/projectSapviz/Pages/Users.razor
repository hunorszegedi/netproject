@page "/users"
@inject projectSapviz.Services.StudentSaveService StudentSaver
@inject IJSRuntime JSRuntime
@using projectSapviz.Models

<div class="users-container">
    <h3>Beiratkozott diákok</h3>

    @if (students == null || students.Count == 0)
    {
        <p>Még nem kerültek diákok felvételre.</p>
    }
    else
    {
        <div class="user-list">
            @foreach (var student in students)
            {
                <div class="user-card">
                    <h4>@student.Name</h4>
                    <p><strong>Email:</strong> @student.Email</p>
                    <p><strong>Iskola:</strong> @student.School</p>
                    <p><strong>Szak:</strong> @student.Specialization</p>

                    <div class="grades-section">
                        <h5>Jegyek</h5>
                        @foreach (var yearEntry in student.Grades)
                        {
                            <div class="year-grades">
                                <h6>@yearEntry.Key. évfolyam</h6>
                                @foreach (var semesterEntry in yearEntry.Value)
                                {
                                    <div class="semester-grades">
                                        <p>@semesterEntry.Key. félév:</p>
                                        <ul>
                                            @foreach (var subjectEntry in semesterEntry.Value)
                                            {
                                                <li>
                                                    <strong>@subjectEntry.Key:</strong> 
                                                    @(string.IsNullOrEmpty(subjectEntry.Value) ? "Nincs megadva" : subjectEntry.Value)
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }

    @if (students != null && students.Count > 0)
    {
        <div class="actions">
            <button @onclick="ClearAllStudents" class="btn-clear">Összes diák törlése</button>
        </div>
    }
</div>

@code {
    private List<StudentEntry> students = new();

    protected override async Task OnInitializedAsync()
    {
        // Diákok betöltése
        students = await StudentSaver.LoadAllAsync();
    }

    private async Task ClearAllStudents()
    {
        // Megerősítés kérése
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Biztosan törölni szeretnéd az összes diákot?" });


        if (confirmed)
        {
            await StudentSaver.ClearAllStudentsAsync();
            students.Clear();
        }
    }
}